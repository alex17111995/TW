#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app_exports = require('../app');
var app = app_exports.app;
var socket_controller = require('../socketController');
var debug = require('debug')('untitled1:server');
var oracleDB = require('../oracleconnect');
var http = require('http');
var poller_listener = require('../controller/poller_listener');
var oracledb=require('oracledb');

//poller_listener(0,0);


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var sio = require("socket.io")(server);
sio.use(function (socket, next) {
    app_exports.session_middleware(socket.request, socket.request.res, next);
});

sio.sockets.on("connection", socket_controller);

oracleDB.initializeDB({
    user: "student",
    password: "student",
    connectString: "192.168.1.69:1521/XE"
}).then(function (pool) {
    // oracleDB.execute_SQL_leave_connection('select * from blabla').then(function(results))
    server.listen(port);
});


server.on('error', onError);
server.on('listening', onListening);

/**
 * Listen on provided port, on all network interfaces.
 */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
